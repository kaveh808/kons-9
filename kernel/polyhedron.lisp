(in-package #:kons-9)

;;;; polyhedron ================================================================

(defclass polyhedron (point-cloud)
  ((faces :accessor faces :initarg :faces :initform (make-array 0 :adjustable t :fill-pointer t))
   (face-normals :accessor face-normals :initarg :face-normals :initform (make-array 0 :adjustable t :fill-pointer t))
   (point-normals :accessor point-normals :initarg :point-normals :initform (make-array 0 :adjustable t :fill-pointer t))
   (point-colors :accessor point-colors :initarg :point-colors :initform nil)
   (show-normals :accessor show-normals :initarg :show-normals :initform nil)  ; length or nil
   (point-source-use-face-centers? :accessor point-source-use-face-centers? :initarg :point-source-use-face-centers? :initform nil)))

(defmethod initialize-instance :after ((polyh polyhedron) &rest initargs)
  (declare (ignore initargs))
  (compute-face-normals polyh)
  (compute-point-normals polyh))

(defmethod copy-instance-data :after ((dst polyhedron) (src polyhedron))
  (setf (faces dst) (faces src)) ;;; TODO - deep copy arrays
  (setf (face-normals dst) (face-normals src))
  (setf (point-normals dst) (point-normals src))
  (setf (point-colors dst) (point-colors src))
  (setf (show-normals dst) (show-normals src)))

(defmethod duplicate-shape ((polyh polyhedron))
  (let ((new-shape (make-instance 'polyhedron)))
    (copy-instance-data new-shape polyh)
    new-shape))

(defmethod empty-polyhedron ((polyh polyhedron))
  (setf (points polyh) (make-array 0 :adjustable t :fill-pointer t))
  (setf (faces polyh) (make-array 0 :adjustable t :fill-pointer t))
  (setf (face-normals polyh) (make-array 0 :adjustable t :fill-pointer t))
  (setf (point-normals polyh) (make-array 0 :adjustable t :fill-pointer t))
  polyh)

(defmethod set-face-point-lists ((polyh polyhedron) point-lists)
  (empty-polyhedron polyh)
  (let ((i -1))
    (dolist (point-list point-lists)
      (let ((p-refs '()))
        (dolist (p point-list)
          (vector-push-extend p (points polyh))
          (push (incf i) p-refs))
        (vector-push-extend (nreverse p-refs) (faces polyh))))))
  
(defmethod polyhedron-bake ((polyh polyhedron))
  (let ((mtx (transform-matrix (transform polyh))))
    (dotimes (i (length (points polyh)))
      (setf (aref (points polyh) i)
            (transform-point (aref (points polyh) i) mtx))))
  (reset-transform (transform polyh))
  polyh)

(defmethod face-center ((polyh polyhedron) face)
  (p-center (face-points polyh face)))

#+nil
(defmethod face-centers ((polyh polyhedron))
  (map 'array #'(lambda (f) (face-center polyh f)) (faces polyh)))

(defmethod face-centers ((polyh polyhedron))
  (map 'vector #'(lambda (f) (face-center polyh f)) (faces polyh)))

(defun triangle-normal (p0 p1 p2)
  (p-normalize (p-cross (p-from-to p0 p1) (p-from-to p1 p2))))

(defun quad-normal (p0 p1 p2 p3)
  (p-normalize (p-cross (p-from-to p0 p2) (p-from-to p1 p3))))

;; no checking, asssumes well-formed faces
(defmethod face-normal ((polyh polyhedron) face)
  (cond ((< (length face) 3)
         (p! 0 0 0))
        ((= (length face) 3)
         (let ((p0 (aref (points polyh) (elt face 0)))
               (p1 (aref (points polyh) (elt face 1)))
               (p2 (aref (points polyh) (elt face 2))))
           (triangle-normal p0 p1 p2)))
        ((= (length face) 4)
         (let ((p0 (aref (points polyh) (elt face 0)))
               (p1 (aref (points polyh) (elt face 1)))
               (p2 (aref (points polyh) (elt face 2)))
               (p3 (aref (points polyh) (elt face 3))))
           (quad-normal p0 p1 p2 p3)))
        (t
         (let ((center (face-center polyh face))
               (p0 (aref (points polyh) (elt face 0)))
               (p1 (aref (points polyh) (elt face 1))))
           (triangle-normal center p0 p1)))))

(defmethod compute-face-normals ((polyh polyhedron))
  (setf (face-normals polyh)
        (map 'vector #'(lambda (f) (face-normal polyh f)) (faces polyh))))

(defmethod compute-point-normals ((polyh polyhedron))
  (let ((p-normals (make-array (length (points polyh)) :initial-element (p! 0 0 0))))
    (doarray (f face (faces polyh))
      (dolist (pref face)
        (setf (aref p-normals pref)
              (p+ (aref p-normals pref)
                  (aref (face-normals polyh) f)))))
    (setf (point-normals polyh)
          (map 'vector #'p-normalize p-normals))))

(defmethod compute-point-normals-SAV ((polyh polyhedron))
  (setf (point-normals polyh) (make-array (length (points polyh))
                                               :initial-element (p! 0 0 0)
                                               :adjustable t
                                               :fill-pointer t))
  (dotimes (f (length (faces polyh)))
    (dolist (pref (aref (faces polyh) f))
      (setf (aref (point-normals polyh) pref)
            (p+ (aref (point-normals polyh) pref)
                (aref (face-normals polyh) f)))))
  (dotimes (n (length (point-normals polyh)))
    (setf (aref (point-normals polyh) n)
          (p-normalize (aref (point-normals polyh) n)))))

(defmethod face-points ((polyh polyhedron) i)
  (mapcar #'(lambda (pref) (aref (points polyh) pref))
          (aref (faces polyh) i)))

(defmethod face-points ((polyh polyhedron) (face list))
  (mapcar #'(lambda (pref) (aref (points polyh) pref))
          face))

(defmethod reverse-face-normals ((polyh polyhedron))
  (dotimes (i (length (face-normals polyh)))
    (setf (aref (face-normals polyh) i) (p-negate (aref (face-normals polyh) i))))
  polyh)

(defmethod allocate-point-colors ((polyh polyhedron))
  (setf (point-colors polyh) (make-array (length (points polyh))
                                              :initial-element *shading-color*)))
  
(defmethod reset-point-colors ((polyh polyhedron))
  (allocate-point-colors polyh)
  polyh)

(defmethod set-point-colors-by-xyz ((polyh polyhedron) color-fn)
  (allocate-point-colors polyh)
  (doarray (i p (points polyh))
    (setf (aref (point-colors polyh) i) (funcall color-fn p))))

(defmethod set-point-colors-by-point-and-normal ((polyh polyhedron) color-fn)
  (allocate-point-colors polyh)
  (doarray (i p (points polyh))
    (let ((n (aref (point-normals polyh) i)))
      (setf (aref (point-colors polyh) i) (funcall color-fn p n)))))

(defun make-polyhedron (points faces &optional (mesh-type 'polyhedron))
  (make-instance mesh-type :points points ;(make-array (length points) :initial-contents points)
                           :faces faces)) ;(make-array (length faces) :initial-contents faces)))

(defmethod draw-normals ((polyh polyhedron))
  (let ((lines ()))
    (dotimes (f (length (faces polyh)))
      (let* ((points (face-points polyh f))
             (p0 (p-center points))
             (p1 (p+ p0 (p-scale (aref (face-normals polyh) f) (show-normals polyh)))))
        (push p1 lines)
        (push p0 lines)))
    (3d-draw-lines lines)))

(defmethod draw ((polyh polyhedron))
  (when (or (= 0 (length (points polyh)))
          (= 0 (length (faces polyh))))
      (return-from draw))

  (3d-setup-lighting)

  (when *display-filled?*
    (3d-draw-filled-polygons (points polyh) (faces polyh)
                             (face-normals polyh) (point-normals polyh) (point-colors polyh)))

  (when *display-wireframe?*
    (3d-draw-wireframe-polygons (points polyh) (faces polyh)))

  (when *display-points?*
    (draw-points polyh))

  (when (show-normals polyh)
    (draw-normals polyh)))

(defmethod refine-face ((polyh polyhedron) face)
  (let* ((point-lists '())
         (points (face-points polyh face))
         (center (p-center points))
        (face-points (list->array points))
        (n (length points)))
    (dotimes (i n)
      (push (list (aref face-points i)
                  (p-average (aref face-points i) (aref face-points (mod (1+ i) n)))
                  center
                  (p-average (aref face-points i) (aref face-points (mod (1- i) n))))
            point-lists))
    point-lists))
                
(defmethod refine-mesh ((polyh polyhedron) &optional (levels 1))
  (if (<= levels 0)
      polyh
      (let ((points '())
            (faces '()))
        (dotimes (i (length (faces polyh)))
          (let ((pref (length points))               ;starting point index
                (point-lists (refine-face polyh i))) ;list of point-lists
            (dolist (point-list point-lists)
              (let ((face '()))
                (dolist (point point-list)
                  (push point points)
                  (push pref face)
                  (incf pref))
                (push face faces)))))
        (refine-mesh (make-polyhedron points faces) (1- levels)))))

(defun triangle-area (p0 p1 p2)
  (let ((e1 (p-from-to p0 p1))
        (e2 (p-from-to p1 p2)))
    (/ (* (p-mag e1) (p-mag e2) (p-angle-sine e1 e2)) 2)))

;;; only works for triangles
(defmethod face-area ((polyh polyhedron) face)
  (cond ((< (length face) 3)
         0.0)
        ((= (length face) 3)
         (let* ((p0 (aref (points polyh) (elt face 0)))
                (p1 (aref (points polyh) (elt face 1)))
                (p2 (aref (points polyh) (elt face 2))))
           (triangle-area p0 p1 p2)))
        (t
         (error "POLYHEDRON ~a FACE ~a IS NOT A TRIANGLE" polyh face))))

(defun barycentric-point (p0 p1 p2 a b)
  (p+ p0
      (p+ (p-scale (p-from-to p0 p1) a)
          (p-scale (p-from-to p0 p2) b))))

(defun generate-face-barycentric-points (p0 p1 p2 num)
  (let ((barycentric-points '()))
    (dotimes (i (round num))
      (let ((a (rand2 0.0 1.0))
            (b (rand2 0.0 1.0)))
        (do () ((<= (+ a b) 1.0))
          (setf a (rand2 0.0 1.0))
          (setf b (rand2 0.0 1.0)))
        (push (barycentric-point p0 p1 p2 a b)
              barycentric-points)))
    barycentric-points))

(defmethod generate-point-cloud ((polyh polyhedron) &optional (density 1.0))
    (when (not (is-triangulated-polyhedron? polyh))
      (error "POLYHEDRON ~a IS NOT TRIANGULATED" polyh))
  (let ((points '()))
    (dotimes (f (length (faces polyh)))
      (let* ((area (face-area polyh (aref (faces polyh) f)))
             (face-points (face-points polyh f))
             (p0 (elt face-points 0))
             (p1 (elt face-points 1))
             (p2 (elt face-points 2))
             (barycentric-points (generate-face-barycentric-points p0 p1 p2 (* area density))))
        (dolist (p barycentric-points)
                                        ;          (vector-push-extend p points))))
          (push p points))))
    (apply #'make-point-cloud points)))

(defun face-triangle-refs (prefs)
  (cond ((< (length prefs) 3)
         '())
        ((= (length prefs) 3)
         (list prefs))
        (t
         (let ((p0 (car prefs)))
           (loop for p1 in (cdr prefs)
                 for p2 in (cddr prefs)
                 collect (list p0 p1 p2))))))
      
(defmethod triangulate-polyhedron ((polyh polyhedron))
  (let ((tri-faces '()))
    (dotimes (f (length (faces polyh)))
      (dolist (tri (face-triangle-refs (aref (faces polyh) f)))
        (push tri tri-faces)))
    ;; SBCL says we can't coerce a list to an array
    ;; (make-polyhedron (points polyh) (coerce tri-faces 'array))
    (make-polyhedron (points polyh) (coerce tri-faces 'vector))))

(defmethod is-triangulated-polyhedron? ((polyh polyhedron))
  (dotimes (f (length (faces polyh)))
    (when (not (<= (length (aref (faces polyh) f)) 3))
      (return-from is-triangulated-polyhedron? nil)))
  t)

(defun make-tetrahedron (diameter)
  (let ((r (* diameter 0.5))
        (-r (* diameter -0.5)))
    (make-polyhedron (vector (p!  r (/     -r (sqrt 6)) (/     -r (sqrt 3)))
                             (p! -r (/     -r (sqrt 6)) (/     -r (sqrt 3)))
                             (p!  0 (/     -r (sqrt 6)) (/ (* 2 r) (sqrt 3)))
                             (p!  0 (/ (* 3 r) (sqrt 6)) 0))
                     (vector '(0 2 1) '(0 3 2) '(1 2 3) '(0 1 3)))))

(defun make-box (x-size y-size z-size)
  (let ((x (* x-size 0.5))
        (y (* y-size 0.5))
        (z (* z-size 0.5)))
    (make-polyhedron (vector (p! (- x) (- y) (- z))
                             (p!    x  (- y) (- z))
                             (p!    x  (- y)    z)
                             (p! (- x) (- y)    z)
                             (p! (- x)    y  (- z))
                             (p!    x     y  (- z))
                             (p!    x     y     z)
                             (p! (- x)    y     z))
                     (vector '(0 1 2 3) '(0 4 5 1) '(1 5 6 2)
                             '(2 6 7 3) '(3 7 4 0) '(4 7 6 5)))))

(defun make-cube (side)
  (let ((r (* side 0.5))
        (-r (* side -0.5)))
    (make-polyhedron (vector (p! -r -r -r)
                             (p!  r -r -r)
                             (p!  r -r  r)
                             (p! -r -r  r)
                             (p! -r  r -r)
                             (p!  r  r -r)
                             (p!  r  r  r)
                             (p! -r  r  r))
                     (vector '(0 1 2 3) '(0 4 5 1) '(1 5 6 2)
                             '(2 6 7 3) '(3 7 4 0) '(4 7 6 5)))))

(defun make-cut-cube-polyhedron (side)
  (let ((r (* side 0.5))
        (-r (* side -0.5))
        (b (* side 0.3)))
    (make-polyhedron (vector (p! -r -r -r)
                             (p!  r -r -r)
                             (p!  r -r  r)
                             (p! -r -r  r)
                             (p! -r  r -r)
                             (p!  r  r -r)
                             (p!  r  r  b)
                             (p!  b  r  r)
                             (p! -r  r  r)
                             (p!  r  b  r))
                     (vector '(1 2 3 0) '(5 6 9 2 1) '(9 7 8 3 2)
                             '(0 4 5 1) '(8 4 0 3) '(8 7 6 5 4) '(6 7 9)))))

(defun make-octahedron (diameter)
  (let* ((r (abs (/ diameter 2)))
         (-r (- r)))
    (make-polyhedron (vector (p!  r  0  0) 
                             (p! -r  0  0)
                             (p!  0  r  0)
                             (p!  0 -r  0)
                             (p!  0  0  r) 
                             (p!  0  0 -r))
                     (vector '(0 2 4) '(2 0 5) '(3 0 4) '(0 3 5)
                             '(2 1 4) '(1 2 5) '(1 3 4) '(3 1 5)))))

(defun make-dodecahedron (diameter)
  (let* ((r (/ diameter 4))
         (phi (* 1.61803 r))
         (inv (* 0.6180355 r)))
    (make-polyhedron (vector (p! 0 inv phi)
                             (p! 0 (- inv) phi)
                             (p! 0 (- inv) (- phi))
                             (p! 0 inv (- phi))
                             (p! phi 0 inv)
                             (p! (- phi) 0 inv)
                             (p! (- phi) 0 (- inv))
                             (p! phi 0 (- inv))
                             (p! inv phi 0)
                             (p! (- inv) phi 0)
                             (p! (- inv) (- phi) 0)
                             (p! inv (- phi) 0)
                             (p! r r r)
                             (p! (- r) r r)
                             (p! (- r) (- r) r)
                             (p! r (- r) r)
                             (p! r (- r) (- r))
                             (p! r r (- r))
                             (p! (- r) r (- r))
                             (p! (- r) (- r) (- r)))
                     (vector '(0 1 15 4 12)
                             '(0 12 8 9 13)
                             '(0 13 5 14 1)
                             '(1 14 10 11 15)
                             '(2 3 17 7 16)
                             '(2 16 11 10 19)
                             '(2 19 6 18 3)
                             '(18 9 8 17 3)
                             '(15 11 16 7 4)
                             '(4 7 17 8 12)
                             '(13 9 18 6 5)
                             '(5 6 19 10 14)))))

(defun make-icosahedron (diameter)
  (let* ((p1 (/ (abs (/ diameter 2)) 1.902076))
         (p2 (* p1 1.618034))
         (-p1 (- p1))
         (-p2 (- p2)))
    (make-polyhedron (vector (p!  p2  p1   0)
                             (p! -p2  p1   0)
                             (p!  p2 -p1   0)
                             (p! -p2 -p1   0)
                             (p!  p1   0  p2)
                             (p!  p1   0 -p2)
                             (p! -p1   0  p2)
                             (p! -p1   0 -p2)
                             (p!   0  p2  p1)
                             (p!   0 -p2  p1)
                             (p!   0  p2 -p1)
                             (p!   0 -p2 -p1))
                     (vector '(0 8 4) '(0 5 10) '(2 4 9) '(2 11 5) '(1 6 8) '(1 10 7)
                             '(3 9 6) '(3 7 11) '(0 10 8) '(1 8 10) '(2 9 11)
                             '(3 11 9) '(4 2 0) '(5 0 2) '(6 1 3) '(7 3 1) '(8 6 4)
                             '(9 4 6) '(10 5 7) '(11 7 5)))))

